RF GUN LLRF CONFIG FILE v1

#Update: Tim Price changed PV-ROOT on 18.04.2017 #

Feel free to write any comments all over this file,
although beware, try not to use any of the keywords used to define parameters, etc!

capitalised words / phrases are keywords the reader searches for
spaces are skipped
; indicates end of line (data entry)
on a keyword line comments can go after;

START_OF_DATA;

VERSION = 1;

PV_COMMANDS_START;  These are Pvs that are needed to send commands, i.e. switch things on / off, They are not monitored. ther are nnone for this object
#pv_suffix must come first before other paramaters to be added to the struct.#


PV_MONITORS_START;              These are the PVs that will be continuously monitored

PV_SUFFIX_LIB_AMP_FF = vm:dsp:ff_amp:amplitude;
PV_CHTYPE        = DBR_DOUBLE;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_TRIG_SOURCE = tcm:trig:source;
PV_CHTYPE        = DBR_ENUM;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_LIB_AMP_SP = vm:dsp:sp_amp:amplitude;
PV_CHTYPE        = DBR_DOUBLE;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_LIB_PHI_FF = vm:dsp:ff_ph:phase;
PV_CHTYPE        = DBR_DOUBLE;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_LIB_PHI_SP = vm:dsp:sp_ph:phase;
PV_CHTYPE        = DBR_DOUBLE;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

# The following two PVs are the "interlocks" #
# Interlock, light #
# RF Output, check box and light #

PV_SUFFIX_INTERLOCK = app:interlock:state;
PV_CHTYPE        = DBR_ENUM;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_LIB_RF_OUTPUT = app:rf_ctrl;
PV_CHTYPE        = DBR_ENUM;
PV_COUNT         = 1;
PV_MASK           = DBE_VALUE;     

PV_SUFFIX_FF_PHASE_LOCK_STATE  = vm:dsp:ff_ph:lock;
PV_CHTYPE        = DBR_ENUM;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

# the lock SP check box #
PV_SUFFIX_FF_AMP_LOCK_STATE  = vm:dsp:ff_amp:lock;
PV_CHTYPE        = DBR_ENUM;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_LIB_TIME_VECTOR = app:time_vector;
PV_CHTYPE        = DBR_DOUBLE;
PV_COUNT         = 1017;
PV_MASK           = DBE_VALUE;

PV_SUFFIX_LIB_PULSE_OFFSET = vm:feed_fwd:offset;
PV_CHTYPE        = DBF_DOUBLE;
PV_COUNT         = 1;
PV_MASK           = DBE_VALUE;

PV_SUFFIX_LIB_PULSE_LENGTH = vm:feed_fwd:duration;
PV_CHTYPE        = DBR_DOUBLE;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_LIB_PHASE_LOOP_LOCK = vm:dsp:pi_ph:loop_closed;
PV_CHTYPE        = DBR_ENUM;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;
    
PV_SUFFIX_LIB_PULSE_SHAPE = vm:dsp:ff_pulse_shape:amp;
PV_CHTYPE        = DBR_DOUBLE;
PV_COUNT         = 1024;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_LIB_PULSE_SHAPE_APPLY = vm:dsp:ff_pulse_shape:apply_tables;
PV_CHTYPE        = DBR_ENUM;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

OBJECTS_START;

NUMBER_OF_OBJECTS = 1;   
NUMBER_OF_ILOCKS  = 0;   

NAME    = VELA-HRRG-LLRF;
PV_ROOT = CLA-GUN-LRF-CTRL-01:;    
LLRF_MAX_AMPLITUDE = 15000; maximum amplitude that the controller can apply, for additionaly saftey this could be compiled in at source... 
LLRF_PHI_CALIBRATION = 1.00;        llrf phi to degrees 
LLRF_AMP_CALIBRATION = 1.00;   1/29.016 llrf amplitiude to MV/m in cavity 
LLRF_CREST_PHI = 0;                 in units of the llrf system 
;POWER_TRACE_LENGTH = 1017;
LLRF_PULSE_LATENCY = 50; NUMBER OF ELEMENTS OF NOISE AT START OF A TRACE, (APPROX)

END_OF_DATA;


SCAN








