GUN LLRF TRACES ONE RECORD CONFIG FILE v1
this is a new method for getting traces in a single record

Feel free to write any comments all over this file,
although beware, try not to use any of the keywords used to define parameters, etc!

capitalised words / phrases are keywords the reader searches for
spaces are skipped
; indicates end of line (data entry)
on a keyword line comments can go after;

START_OF_DATA;

VERSION = 1;

PV_COMMANDS_START;  These are Pvs that are needed to send commands, i.e. switch things on / off, They are not monitored. ther are nnone for this object
#pv_suffix must come first before other paramaters to be added to the struct.#

PV_MONITORS_START;              These are the PVs that will be continuously monitored

PV_SUFFIX_PWR_REM_SCAN = power_remote.SCAN;
PV_CHTYPE        = DBR_ENUM;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_PHASE_REM_SCAN = amp_phase.SCAN; 
PV_CHTYPE        = DBR_ENUM;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_AMP_DER_SCAN = amp_derivative.SCAN;
PV_CHTYPE        = DBR_ENUM;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_PHASE_DER_SCAN = phase_derivative.SCAN;
PV_CHTYPE        = DBR_ENUM;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_PWR_LOC_SCAN = power_local.SCAN;
PV_CHTYPE        = DBR_ENUM;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

OBJECTS_START;

NUMBER_OF_OBJECTS = 14;   
NUMBER_OF_ILOCKS  = 0;   




NAME   = KLYSTRON_FORWARD_POWER; 
PV_ROOT = ad1:ch1:;    
LLRF_CHANNEL=PV_SUFFIX_LIB_CH1_PWR_REM;

NAME   = KLYSTRON_FORWARD_PHASE;
PV_ROOT = ad1:ch1:;
LLRF_CHANNEL=PV_SUFFIX_LIB_CH1_PHASE_REM;

NAME   = KLYSTRON_REVERSE_POWER;
PV_ROOT = ad1:ch2:;    
LLRF_CHANNEL=PV_SUFFIX_LIB_CH2_PWR_REM;

NAME   = KLYSTRON_REVERSE_PHASE;
PV_ROOT = ad1:ch2:;
LLRF_CHANNEL=PV_SUFFIX_LIB_CH2_PHASE_REM;

#lrrg#

NAME   = LRRG_CAVITY_FORWARD_POWER;
PV_ROOT = ad1:ch3:;    
LLRF_CHANNEL=PV_SUFFIX_LIB_CH3_PWR_REM;

NAME   = LRRG_CAVITY_FORWARD_PHASE;
PV_ROOT = ad1:ch3:;
LLRF_CHANNEL=PV_SUFFIX_LIB_CH3_PHASE_REM;

NAME   = LRRG_CAVITY_REVERSE_POWER;
PV_ROOT = ad1:ch4:;    
LLRF_CHANNEL=PV_SUFFIX_LIB_CH4_PWR_REM;

NAME   = LRRG_CAVITY_REVERSE_PHASE;
PV_ROOT = ad1:ch4:;  
LLRF_CHANNEL=PV_SUFFIX_LIB_CH4_PHASE_REM;

# hrrg#
NAME   = HRRG_CAVITY_FORWARD_POWER;
PV_ROOT = ad1:ch5:;
LLRF_CHANNEL=PV_SUFFIX_LIB_CH5_PWR_REM;

NAME   = HRRG_CAVITY_FORWARD_PHASE;
PV_ROOT = ad1:ch5:;
LLRF_CHANNEL=PV_SUFFIX_LIB_CH5_PHASE_REM;

NAME   = HRRG_CAVITY_REVERSE_POWER;
PV_ROOT = ad1:ch8:;
LLRF_CHANNEL=PV_SUFFIX_LIB_CH8_PWR_REM;

NAME   = HRRG_CAVITY_REVERSE_PHASE;
PV_ROOT = ad1:ch8:;
LLRF_CHANNEL=PV_SUFFIX_LIB_CH8_PHASE_REM;

#hrrg probe#
NAME   = CAVITY_PROBE_POWER;
PV_ROOT = ad1:ch6:;
LLRF_CHANNEL=PV_SUFFIX_LIB_CH6_PWR_REM;

NAME   = CAVITY_PROBE_PHASE;
PV_ROOT = ad1:ch6:;
LLRF_CHANNEL=PV_SUFFIX_LIB_CH6_PHASE_REM;

#Calibrate#
NAME   = CALIBRATION_POWER;
PV_ROOT = ad1:ch7:;
LLRF_CHANNEL=PV_SUFFIX_LIB_CH7_PWR_REM;

NAME   = CALIBRATION_PHASE;
PV_ROOT = ad1:ch7:;
LLRF_CHANNEL=PV_SUFFIX_LIB_CH7_PHASE_REM;


END_OF_DATA;

## if in the future we want to add in all this stuff ... ??

PV_SUFFIX_PHASE_DER_EVID = phase_derivative.EVID;
PV_CHTYPE        = DBR_TIME_STRING;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_PHASE_DER_DERIVATIVE = phase_derivative.DERIVATIVE;
PV_CHTYPE        = DBR_TIME_DOUBLE;
PV_COUNT         = 1017;
PV_MASK          = DBE_VALUE;


PV_SUFFIX_PWR_LOC_EVID = power_local.EVID;
PV_CHTYPE        = DBR_TIME_STRING;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_AMP_DER_EVID = amp_derivative.EVID;
PV_CHTYPE        = DBR_TIME_STRING;
PV_COUNT         = 1;
PV_MASK          = DBE_VALUE;

PV_SUFFIX_AMP_DER_DERIVATIVE = amp_derivative.DERIVATIVE;
PV_CHTYPE        = DBR_TIME_DOUBLE;
PV_COUNT         = 1017;
PV_MASK          = DBE_VALUE;










